USAGE FILE FOR SIMPLE VERSION OF THE UPDATE-CONF.D SCRIPT
For information about the COMPLEX version refer to the man page.

INSTALLATION
============

Download it from GitHub:
  git clone git://github.com/Atha/update-conf.d.git
  cd update-conf.d

Run the following commands while in this directory:
1) make simple
2) make install
   this will
   b) copy update-conf.d to /usr/local/sbin
   c) create an empty /etc/update-conf.d.conf (or touch if it should already
      exist)

If you want to be safe and test the installation, add a PREFIX directory to the
Makefile, like /tmp. You can test the installation from there. Note: you can do
this as a regular user, provided you have write access to the PREFIX directory.

You need to have write access to /etc and /usr/local/sbin in order to perform an
unprefixed installation. Login as root to perform a system wide installation.

BE CAREFUL AND USE THIS SHELL SCRIPT AT YOUR OWN RISK!


UNINSTALLATION
==============

1) make uninstall
   this will remove /usr/local/sbin/update-conf.d from your system

However, your configuration directories, like /etc/fstab.d, will remain! You are
encouraged to edit your files manually to maintain a suitable and working
configuration.
Also, the configuration file /etc/update-conf.d.conf will remain. You may delete
it, if it is no longer of use.


GENTOO LINUX EBUILD
===================

If you use Gentoo Linux, you might be interested in using the ebuild to perform
the installation. Just copy update-confd-9999.ebuild to your portage overlay,
say to app-admin/update-confd.

You can then use portage to install the shell script for you:
"emerge update-confd"


USAGE
=====

Running "make install" will install the shell script and you will have to
modulize the file you want to have ".d-ed" by yourself.

Start by copying the desired file to a .d-ed directory.

This example assumes "/etc/fstab":

  cd /etc
  mkdir fstab.d
  cp fstab fstab.d/00fstab
  cd fstab.d

Now add "fstab" to your /etc/update-conf.d.conf file:

  echo "fstab" >> /etc/update-conf.d.conf

You can now test-run your set-up:

  update-conf.d fstab

You should see a similar output of the shell script:

--BEGIN-- SAMPLE OUTPUT --BEGIN--
fstab
/etc/fstab.d/fstab created, header added
Added: /etc/fstab.d/00fstab
Existing /etc/fstab renamed to /etc/fstab.d.bak
New configuration file /etc/fstab.d/fstab moved to /etc/fstab
--END-- SAMPLE OUTPUT --END--

Now it is time to modulize /etc/fstab.d/00fstab. You can have up to 100 seperate
configuration snippets for /etc/fstab, namely 00something to 99something. All
other files will be ignored. Once you have finished, remove the original
00fstab or rename it, like .00fstab or fstab-original.

To add a new <conf>.d entry, simply type:
  echo <conf> >> /etc/update-conf.d.conf
or edit the file with your favorite editor.

Example:
  mkdir /etc/hosts.d
  cp /etc/hosts /etc/hosts.d/00hosts
  echo hosts >> /etc/update-conf.d.conf

Now edit some files in /etc/hosts.d:
  cd /etc/hosts.d
  cp 00hosts 01loopback
  cp 00hosts 02local
  cp 00hosts 10wins
  cp 00hosts 20apple
  cp 00hosts 61vpn
  cp 00hosts 99temporary

Edit these files so they only contain what the name suggests and so you don't
have any doubles.
Rename 00hosts:
  mv 00hosts hosts-backup
NOTE: Filenames that don't start with two digits, like hosts-backup, will not
be processed by the shell script. Since all your configuration for /etc/hosts
should now be in seperate files (01loopback to 99temporary) you will have all
your configuration lines available in the resulting /etc/hosts after running
the shell script.

Run the shell script:
  update-conf.d hosts


2013-03-28, Atha